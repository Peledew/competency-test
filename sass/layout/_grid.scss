@use "sass:math";
@use "../abstracts/mixins" as mixins;
@use "../base/variables" as vars;

// Base layout classes
.container {
  width: 100%;
  max-width: 1440px;
  margin: 0 auto;
  padding: 0 20px;
  box-sizing: border-box;
}
.row {
  display: flex;
  flex-flow: row wrap;
}

// Grid gaps
@each $key, $val in vars.$grid-gaps {
    .gap-#{$key} > * {
      padding: $val;
    }
    .gap-#{$key} {
      margin-left: -$val;
      margin-right: -$val;
    }
  }
  
  // Justify content classes
  @each $val in vars.$layout-values {
    .justify-#{$val} {
      justify-content: $val;
    }
  }

// Column classes  
@include mixins.xs {
  @for $i from 1 through vars.$grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, vars.$grid-columns); 
    }
  }
}

@include mixins.sm {
  @for $i from 1 through vars.$grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, vars.$grid-columns);
    }
  }
}

@include mixins.md {
  @for $i from 1 through vars.$grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, vars.$grid-columns);
    }
  }
}

@include mixins.lg {
  @for $i from 1 through vars.$grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, vars.$grid-columns);
    }
  }
}

@include mixins.xl {
  @for $i from 1 through vars.$grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, vars.$grid-columns);
    }
  }
}